name: Sui Smart Contract CI/CD
'on':
  push:
    branches:
    - main
    - develop
  pull_request:
    branches:
    - main
    - develop
env:
  RUST_BACKTRACE: '1'
  SUI_LOG_LEVEL: info
  SUI_BRANCH: devnet
jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
        - ubuntu-latest
        rust:
        - stable
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Install Homebrew and Sui
      run: "\n                        # Install Homebrew\n                       \
        \ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\
        \n                        \n                        # Add brew to PATH for\
        \ this step and future steps\n                        echo \"/home/linuxbrew/.linuxbrew/bin\"\
        \ >> $GITHUB_PATH\n                        echo \"/home/linuxbrew/.linuxbrew/sbin\"\
        \ >> $GITHUB_PATH\n                        \n                        # Set\
        \ environment variables for this workflow\n                        echo \"\
        HOMEBREW_PREFIX=/home/linuxbrew/.linuxbrew\" >> $GITHUB_ENV\n            \
        \            echo \"HOMEBREW_CELLAR=/home/linuxbrew/.linuxbrew/Cellar\" >>\
        \ $GITHUB_ENV\n                        echo \"HOMEBREW_REPOSITORY=/home/linuxbrew/.linuxbrew/Homebrew\"\
        \ >> $GITHUB_ENV\n                        \n                        # Source\
        \ brew environment for this step\n                        eval \"$(/home/linuxbrew/.linuxbrew/bin/brew\
        \ shellenv)\"\n                        \n                        # Install\
        \ dependencies\n                        sudo apt-get update\n            \
        \            sudo apt-get install -y build-essential\n                   \
        \     brew install gcc\n                        \n                       \
        \ # Install Sui\n                        brew install sui\n              \
        \          \n                        # Verify Sui installation\n         \
        \               sui --version\n                    "
    - name: Build Move modules
      run: "\n                        # Verify sui command is available\n        \
        \                which sui || (echo \"Sui command not found in PATH\" && exit\
        \ 1)\n                        sui --version\n                        \n  \
        \                      # Build the project\n                        sui move\
        \ build\n                    "
      working-directory: ${{ github.workspace }}
    - name: Run Move tests
      if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
      run: "\n                        # Verify sui command is available\n        \
        \                which sui || (echo \"Sui command not found in PATH\" && exit\
        \ 1)\n                        \n                        # Run tests\n    \
        \                    sui move test\n                    "
      working-directory: ${{ github.workspace }}
    - name: Setup Sui CLI config
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: "\n                        # Verify sui command is available\n        \
        \                which sui || (echo \"Sui command not found in PATH\" && exit\
        \ 1)\n                        sui --version\n                        \n  \
        \                      # Create config directory\n                       \
        \ mkdir -p ~/.sui/sui_config\n                        \n                 \
        \       if [ -n \"${{ secrets.SUI_CONFIG }}\" ]; then\n                  \
        \          echo \"${{ secrets.SUI_CONFIG }}\" > ~/.sui/sui_config/client.yaml\n\
        \                        else\n                            echo \"Warning:\
        \ SUI_CONFIG secret is not set. Creating default config...\"\n           \
        \                 \n                            # Generate keypair with error\
        \ handling\n                            if ! sui keytool generate ed25519\
        \ > key.txt 2>&1; then\n                                echo \"\u274C Failed\
        \ to generate Sui keypair\"\n                                cat key.txt 2>/dev/null\
        \ || true\n                                exit 1\n                      \
        \      fi\n                            \n                            # Extract\
        \ address with better error handling\n                            ADDRESS=$(grep\
        \ -oP 'address: \\K[^ ]+' key.txt)\n                            if [ -z \"\
        $ADDRESS\" ]; then\n                                echo \"\u274C Failed to\
        \ extract address from keypair output\"\n                                cat\
        \ key.txt\n                                exit 1\n                      \
        \      fi\n                            \n                            # Read\
        \ keystore content\n                            KEYSTORE=$(cat key.txt)\n\
        \                            \n                            # Create config\
        \ with the generated address (fixing heredoc syntax)\n                   \
        \         cat > ~/.sui/sui_config/client.yaml << 'EOFCONFIG'\n---\nkeystore:\n\
        \    File: ~/.sui/sui_config/sui.keystore\nenvs:\n    testnet:\n        url:\
        \ \"https://fullnode.testnet.sui.io:443\"\n        ws-url: \"wss://fullnode.testnet.sui.io:443\"\
        \nactive_env: testnet\nactive_address: \"${ADDRESS}\"\nEOFCONFIG\n\n     \
        \                       # Replace placeholder with actual address\n      \
        \                      sed -i \"s/\\${ADDRESS}/${ADDRESS}/g\" ~/.sui/sui_config/client.yaml\n\
        \                            \n                            # Save keystore\n\
        \                            echo \"${KEYSTORE}\" > ~/.sui/sui_config/sui.keystore\n\
        \                            \n                            # Cleanup\n   \
        \                         rm key.txt\n                            \n     \
        \                       echo \"\u2705 Generated new Sui configuration with\
        \ address: ${ADDRESS}\"\n                        fi\n                    \
        \    \n                        # Display config for debugging (excluding sensitive\
        \ data)\n                        echo \"Current Sui config (active_address\
        \ and endpoints):\"\n                        grep -E 'active_address|url:|ws-url:'\
        \ ~/.sui/sui_config/client.yaml || true\n                    "
    - name: Deploy to testnet
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        SUI_NETWORK: testnet
        DEPLOYER_MNEMONIC: ${{ secrets.DEPLOYER_MNEMONIC }}
      run: "\n                        # Verify sui command is available\n        \
        \                which sui || (echo \"Sui command not found in PATH\" && exit\
        \ 1)\n                        \n                        echo \"Current active\
        \ address:\"\n                        sui client active-address || true\n\
        \                        \n                        # Check if we have gas\
        \ before attempting deployment\n                        echo \"Checking gas\
        \ balance...\"\n                        sui client gas || true\n         \
        \               \n                        echo \"Publishing package...\"\n\
        \                        if sui client publish --gas-budget 100000000; then\n\
        \                            echo \"\u2705 Package published successfully\"\
        \n                        else\n                            echo \"\u274C\
        \ Deployment failed\"\n                            echo \"This might be due\
        \ to insufficient gas or network issues\"\n                            exit\
        \ 1\n                        fi\n                    "
    - name: Verify deployment
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: "\n                        # Verify sui command is available\n        \
        \                which sui || (echo \"Sui command not found in PATH\" && exit\
        \ 1)\n                        \n                        # Get the latest transaction\
        \ status\n                        echo \"Checking recent transactions...\"\
        \n                        sui client transactions --limit 5 || true\n    \
        \                    \n                        LATEST_TX=$(sui client transactions\
        \ --limit 1 | tail -n 1 | awk '{print $1}' 2>/dev/null || echo \"\")\n   \
        \                     if [ -n \"$LATEST_TX\" ] && [ \"$LATEST_TX\" != \"digest\"\
        \ ]; then\n                            echo \"Verifying transaction: $LATEST_TX\"\
        \n                            # Check transaction status\n               \
        \             if sui client transaction \"$LATEST_TX\" | grep -q \"Status.*Success\"\
        ; then\n                                echo \"\u2705 Deployment verified\
        \ successfully\"\n                            else\n                     \
        \           echo \"\u274C Deployment verification failed\"\n             \
        \                   sui client transaction \"$LATEST_TX\" || true\n      \
        \                          exit 1\n                            fi\n      \
        \                  else\n                            echo \"\u26A0\uFE0F \
        \ No recent transaction found to verify, but deployment may have succeeded\"\
        \n                            echo \"Check the Sui explorer for your package\
        \ deployment\"\n                        fi\n                    "
