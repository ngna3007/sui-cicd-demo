name: Sui Smart Contract CI/CD
'on':
  push:
    branches:
    - main
    - develop
  pull_request:
    branches:
    - main
    - develop
env:
  RUST_BACKTRACE: '1'
  SUI_LOG_LEVEL: info
  SUI_BRANCH: devnet
jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
        - ubuntu-latest
        rust:
        - stable
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Install Homebrew and Sui
      run: "\n                        # Install Homebrew\n                       \
        \ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\
        \n                        echo 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew\
        \ shellenv)\"' >> /home/runner/.profile\n                        echo 'eval\
        \ \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"' >> /home/runner/.bashrc\n\
        \                        eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"\
        \n                        \n                        # Install dependencies\n\
        \                        sudo apt-get update\n                        sudo\
        \ apt-get install -y build-essential\n                        brew install\
        \ gcc\n                        \n                        # Install Sui\n \
        \                       brew install sui\n                        \n     \
        \                   # Verify Sui installation\n                        sui\
        \ --version\n                    "
    - name: Build Move modules
      run: "\n                        eval \"$(/home/linuxbrew/.linuxbrew/bin/brew\
        \ shellenv)\"\n                        sui move build\n                  \
        \  "
      working-directory: ${{ github.workspace }}
    - name: Run Move tests
      if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
      run: "\n                        eval \"$(/home/linuxbrew/.linuxbrew/bin/brew\
        \ shellenv)\"\n                        sui move test\n                    "
      working-directory: ${{ github.workspace }}
    - name: Setup Sui CLI config
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: "\n                        eval \"$(/home/linuxbrew/.linuxbrew/bin/brew\
        \ shellenv)\"\n                        \n                        # Create\
        \ config directory\n                        mkdir -p ~/.sui/sui_config\n \
        \                       \n                        if [ -n \"${{ secrets.SUI_CONFIG\
        \ }}\" ]; then\n                            echo \"${{ secrets.SUI_CONFIG\
        \ }}\" > ~/.sui/sui_config/client.yaml\n                        else\n   \
        \                         echo \"Warning: SUI_CONFIG secret is not set. Creating\
        \ default config...\"\n                            \n                    \
        \        # Generate keypair first\n                            sui keytool\
        \ generate > key.txt\n                            ADDRESS=$(grep -oP 'address:\
        \ \\K[^ ]+' key.txt)\n                            KEYSTORE=$(cat key.txt)\n\
        \                            \n                            # Create config\
        \ with the generated address\n                            cat > ~/.sui/sui_config/client.yaml\
        \ << EOL\n---\nkeystore:\n    File: ~/.sui/sui_config/sui.keystore\nenvs:\n\
        \    testnet:\n        url: \"https://fullnode.testnet.sui.io:443\"\n    \
        \    ws-url: \"wss://fullnode.testnet.sui.io:443\"\nactive_env: testnet\n\
        active_address: \"${ADDRESS}\"\nEOL\n                            \n      \
        \                      # Save keystore\n                            echo \"\
        ${KEYSTORE}\" > ~/.sui/sui_config/sui.keystore\n                         \
        \   \n                            # Cleanup\n                            rm\
        \ key.txt\n                        fi\n                        \n        \
        \                # Display config for debugging (excluding sensitive data)\n\
        \                        echo \"Current Sui config (active_address and endpoints):\"\
        \n                        grep -E 'active_address|url:|ws-url:' ~/.sui/sui_config/client.yaml\
        \ || true\n                    "
    - name: Deploy to testnet
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        SUI_NETWORK: testnet
        DEPLOYER_MNEMONIC: ${{ secrets.DEPLOYER_MNEMONIC }}
      run: "\n                        eval \"$(/home/linuxbrew/.linuxbrew/bin/brew\
        \ shellenv)\"\n                        \n                        echo \"Current\
        \ active address:\"\n                        sui client active-address ||\
        \ true\n                        \n                        echo \"Publishing\
        \ package...\"\n                        sui client publish --gas-budget 100000000\
        \ || {\n                            echo \"\u274C Deployment failed\"\n  \
        \                          exit 1\n                        }\n           \
        \         "
    - name: Verify deployment
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: "\n                        eval \"$(/home/linuxbrew/.linuxbrew/bin/brew\
        \ shellenv)\"\n                        # Get the latest transaction status\n\
        \                        LATEST_TX=$(sui client transactions | head -n 2 |\
        \ tail -n 1 | awk '{print $1}')\n                        if [ -n \"$LATEST_TX\"\
        \ ]; then\n                            # Check transaction status\n      \
        \                      sui client transaction $LATEST_TX | grep -q \"Status\
        \ : Success\"\n                            if [ $? -eq 0 ]; then\n       \
        \                         echo \"\u2705 Deployment verified successfully\"\
        \n                            else\n                                echo \"\
        \u274C Deployment verification failed\"\n                                exit\
        \ 1\n                            fi\n                        else\n      \
        \                      echo \"\u274C No transaction found to verify\"\n  \
        \                          exit 1\n                        fi\n          \
        \          "
