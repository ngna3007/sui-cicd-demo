name: Sui Smart Contract CI/CD
'on':
  push:
    branches:
    - main
    - develop
  pull_request:
    branches:
    - main
    - develop
env:
  RUST_BACKTRACE: '1'
  SUI_LOG_LEVEL: info
  SUI_BRANCH: devnet
jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
        - ubuntu-latest
        rust:
        - stable
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Install Homebrew and Sui
      run: "\n                        # Install Homebrew\n                       \
        \ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\
        \n                        \n                        # Add brew to PATH for\
        \ this step and future steps\n                        echo \"/home/linuxbrew/.linuxbrew/bin\"\
        \ >> $GITHUB_PATH\n                        echo \"/home/linuxbrew/.linuxbrew/sbin\"\
        \ >> $GITHUB_PATH\n                        \n                        # Set\
        \ environment variables for this workflow\n                        echo \"\
        HOMEBREW_PREFIX=/home/linuxbrew/.linuxbrew\" >> $GITHUB_ENV\n            \
        \            echo \"HOMEBREW_CELLAR=/home/linuxbrew/.linuxbrew/Cellar\" >>\
        \ $GITHUB_ENV\n                        echo \"HOMEBREW_REPOSITORY=/home/linuxbrew/.linuxbrew/Homebrew\"\
        \ >> $GITHUB_ENV\n                        \n                        # Source\
        \ brew environment for this step\n                        eval \"$(/home/linuxbrew/.linuxbrew/bin/brew\
        \ shellenv)\"\n                        \n                        # Install\
        \ dependencies\n                        sudo apt-get update\n            \
        \            sudo apt-get install -y build-essential\n                   \
        \     brew install gcc\n                        \n                       \
        \ # Install Sui\n                        brew install sui\n              \
        \          \n                        # Verify Sui installation\n         \
        \               sui --version\n                    "
    - name: Build Move modules
      run: "\n                        # Verify sui command is available\n        \
        \                which sui || (echo \"Sui command not found in PATH\" && exit\
        \ 1)\n                        sui --version\n                        \n  \
        \                      # Build the project\n                        sui move\
        \ build\n                    "
      working-directory: ${{ github.workspace }}
    - name: Run Move tests
      if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
      run: "\n                        # Verify sui command is available\n        \
        \                which sui || (echo \"Sui command not found in PATH\" && exit\
        \ 1)\n                        \n                        # Run tests\n    \
        \                    sui move test\n                    "
      working-directory: ${{ github.workspace }}
    - name: Setup Sui CLI config
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        SUI_CONFIG: ${{ secrets.SUI_CONFIG }}
        SUI_KEYSTORE: ${{ secrets.SUI_KEYSTORE }}
        SUI_ALIASES: ${{ secrets.SUI_ALIASES }}
      run: "\n                        # Verify sui command is available\n        \
        \                which sui || (echo \"Sui command not found in PATH\" && exit\
        \ 1)\n                        \n                        # Create config directory\n\
        \                        mkdir -p ~/.sui/sui_config\n                    \
        \    \n                        echo \"Setting up Sui configuration...\"\n\
        \                        echo \"SUI_CONFIG secret present: $([ -n \"$SUI_CONFIG\"\
        \ ] && echo \"YES\" || echo \"NO\")\"\n                        echo \"SUI_KEYSTORE\
        \ secret present: $([ -n \"$SUI_KEYSTORE\" ] && echo \"YES\" || echo \"NO\"\
        )\"\n                        echo \"SUI_ALIASES secret present: $([ -n \"\
        $SUI_ALIASES\" ] && echo \"YES\" || echo \"NO\")\"\n                     \
        \   \n                        if [ -n \"$SUI_CONFIG\" ] && [ -n \"$SUI_KEYSTORE\"\
        \ ] && [ -n \"$SUI_ALIASES\" ]; then\n                            # Write\
        \ config file\n                            echo \"Writing SUI_CONFIG to client.yaml...\"\
        \n                            echo \"$SUI_CONFIG\" > ~/.sui/sui_config/client.yaml\n\
        \                            echo \"File written. Size: $(wc -c < ~/.sui/sui_config/client.yaml)\
        \ bytes\"\n                            echo \"\u2705 Written SUI_CONFIG to\
        \ client.yaml\"\n                            \n                          \
        \  # Write keystore file\n                            echo \"Writing SUI_KEYSTORE\
        \ to sui.keystore...\"\n                            echo \"$SUI_KEYSTORE\"\
        \ > ~/.sui/sui_config/sui.keystore\n                            echo \"File\
        \ written. Size: $(wc -c < ~/.sui/sui_config/sui.keystore) bytes\"\n     \
        \                       echo \"\u2705 Written SUI_KEYSTORE\"\n           \
        \                 \n                            # Write aliases file\n   \
        \                         echo \"Writing SUI_ALIASES to sui.aliases...\"\n\
        \                            echo \"$SUI_ALIASES\" > ~/.sui/sui_config/sui.aliases\n\
        \                            echo \"File written. Size: $(wc -c < ~/.sui/sui_config/sui.aliases)\
        \ bytes\"\n                            echo \"\u2705 Written SUI_ALIASES\"\
        \n                            \n                            # Set proper permissions\n\
        \                            chmod 600 ~/.sui/sui_config/*\n             \
        \               \n                            # List files to verify they\
        \ exist\n                            echo \"Files in ~/.sui/sui_config:\"\n\
        \                            ls -la ~/.sui/sui_config/\n                 \
        \           \n                            # Show first few lines of each file\
        \ to verify content\n                            echo \"=== client.yaml (first\
        \ 5 lines) ===\"\n                            head -5 ~/.sui/sui_config/client.yaml\
        \ || echo \"Failed to read client.yaml\"\n                            \n \
        \                           echo \"=== sui.keystore (first 3 lines) ===\"\n\
        \                            head -3 ~/.sui/sui_config/sui.keystore || echo\
        \ \"Failed to read sui.keystore\"\n                            \n        \
        \                    echo \"=== sui.aliases (first 3 lines) ===\"\n      \
        \                      head -3 ~/.sui/sui_config/sui.aliases || echo \"Failed\
        \ to read sui.aliases\"\n                            \n                  \
        \          # Initialize addresses from keystore\n                        \
        \    echo \"=== Initializing Addresses ===\"\n                           \
        \ python3 << 'EOF'\nimport json\nimport subprocess\nimport sys\nimport os\n\
        \ntry:\n    # Check Sui version\n    result = subprocess.run(['sui', '--version'],\
        \ \n                        capture_output=True, text=True)\n    print(f\"\
        Sui version: {result.stdout.strip()}\")\n    \n    # Use home directory expansion\
        \ to get the correct path\n    config_dir = os.path.expanduser('~/.sui/sui_config')\n\
        \    client_yaml = os.path.join(config_dir, 'client.yaml')\n    keystore_file\
        \ = os.path.join(config_dir, 'sui.keystore')\n    aliases_file = os.path.join(config_dir,\
        \ 'sui.aliases')\n    \n    print(f\"Config directory: {config_dir}\")\n \
        \   print(f\"Checking if files exist:\")\n    print(f\"  client.yaml: {os.path.exists(client_yaml)}\
        \ (size: {os.path.getsize(client_yaml) if os.path.exists(client_yaml) else\
        \ 'N/A'})\")\n    print(f\"  sui.keystore: {os.path.exists(keystore_file)}\
        \ (size: {os.path.getsize(keystore_file) if os.path.exists(keystore_file)\
        \ else 'N/A'})\")\n    print(f\"  sui.aliases: {os.path.exists(aliases_file)}\
        \ (size: {os.path.getsize(aliases_file) if os.path.exists(aliases_file) else\
        \ 'N/A'})\")\n    \n    if os.path.exists(config_dir):\n        print(f\"\
        Contents of {config_dir}:\")\n        for item in os.listdir(config_dir):\n\
        \            item_path = os.path.join(config_dir, item)\n            size\
        \ = os.path.getsize(item_path) if os.path.isfile(item_path) else 'DIR'\n \
        \           print(f\"  {item} ({size} bytes)\")\n    \n    if not os.path.exists(client_yaml):\n\
        \        print(\"\u274C client.yaml not found\")\n        sys.exit(1)\n  \
        \  \n    # Read and fix client.yaml paths using string replacement\n    print(\"\
        Fixing paths in client.yaml...\")\n    with open(client_yaml, 'r') as f:\n\
        \        config_content = f.read()\n    \n    print(f\"Original client.yaml\
        \ content (first 200 chars):\")\n    print(repr(config_content[:200]))\n \
        \   \n    # Replace the local path with CI path\n    updated_content = config_content.replace(\n\
        \        '/home/ngocanh/.sui/sui_config/sui.keystore',\n        os.path.join(config_dir,\
        \ 'sui.keystore')\n    )\n    \n    # Write the updated config back\n    with\
        \ open(client_yaml, 'w') as f:\n        f.write(updated_content)\n    print(\"\
        \u2705 Updated keystore path in client.yaml\")\n    \n    # Verify the configuration\
        \ files are properly set up\n    print(\"Verifying configuration files...\"\
        )\n    \n    # Check if keystore file exists and is valid\n    if os.path.exists(keystore_file):\n\
        \        try:\n            with open(keystore_file) as f:\n              \
        \  keystore = json.load(f)\n            print(f\"\u2705 Keystore loaded with\
        \ {len(keystore)} keys\")\n        except Exception as e:\n            print(f\"\
        \u274C Error reading keystore: {e}\")\n            with open(keystore_file)\
        \ as f:\n                content = f.read()\n            print(f\"Keystore\
        \ content (first 100 chars): {repr(content[:100])}\")\n            sys.exit(1)\n\
        \    else:\n        print(\"\u274C Keystore file not found\")\n        sys.exit(1)\n\
        \    \n    # Check if aliases file exists and is valid\n    if os.path.exists(aliases_file):\n\
        \        try:\n            with open(aliases_file) as f:\n               \
        \ aliases = json.load(f)\n            print(f\"\u2705 Aliases loaded with\
        \ {len(aliases)} entries\")\n        except Exception as e:\n            print(f\"\
        \u274C Error reading aliases: {e}\")\n            with open(aliases_file)\
        \ as f:\n                content = f.read()\n            print(f\"Aliases\
        \ content (first 100 chars): {repr(content[:100])}\")\n            sys.exit(1)\n\
        \    else:\n        print(\"\u274C Aliases file not found\")\n        sys.exit(1)\n\
        \    \n    # Try to get current addresses\n    print(\"Checking available\
        \ addresses...\")\n    try:\n        result = subprocess.run(['sui', 'client',\
        \ 'addresses'], \n                            capture_output=True, text=True)\n\
        \        print(f\"Address command return code: {result.returncode}\")\n  \
        \      if result.stdout:\n            print(f\"stdout: {result.stdout}\")\n\
        \        if result.stderr:\n            print(f\"stderr: {result.stderr}\"\
        )\n    except Exception as e:\n        print(f\"Error checking addresses:\
        \ {e}\")\n\nexcept Exception as e:\n    print(f\"\u274C Configuration setup\
        \ failed: {e}\")\n    import traceback\n    traceback.print_exc()\n    sys.exit(1)\n\
        EOF\n                            \n                        else\n        \
        \                    echo \"\u274C Required secrets missing\"\n          \
        \                  exit 1\n                        fi\n                  \
        \  "
    - name: Deploy to devnet
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        SUI_NETWORK: devnet
        SUI_CONFIG: ${{ secrets.SUI_CONFIG }}
        SUI_KEYSTORE: ${{ secrets.SUI_KEYSTORE }}
        SUI_ALIASES: ${{ secrets.SUI_ALIASES }}
      run: "\n                        # Verify sui command is available\n        \
        \                which sui || (echo \"Sui command not found in PATH\" && exit\
        \ 1)\n                        \n                        # Check if all required\
        \ secrets are provided\n                        if [ -z \"$SUI_CONFIG\" ]\
        \ || [ -z \"$SUI_KEYSTORE\" ] || [ -z \"$SUI_ALIASES\" ]; then\n         \
        \                   echo \"\u26A0\uFE0F  Deployment skipped: Required secrets\
        \ are not configured\"\n                            echo \"To enable deployment:\"\
        \n                            echo \"1. Add SUI_CONFIG secret with your wallet\
        \ configuration\"\n                            echo \"2. Add SUI_KEYSTORE\
        \ secret with your keystore file content\"\n                            echo\
        \ \"3. Add SUI_ALIASES secret with your aliases file content\"\n         \
        \                   echo \"4. Fund the wallet with devnet SUI tokens\"\n \
        \                           exit 0\n                        fi\n         \
        \               \n                        echo \"=== Pre-deployment Checks\
        \ ===\"\n                        echo \"Current active environment:\"\n  \
        \                      sui client active-env || {\n                      \
        \      echo \"\u274C Failed to get active environment\"\n                \
        \            exit 1\n                        }\n                        \n\
        \                        echo \"Current active address:\"\n              \
        \          ACTIVE_ADDRESS=$(sui client active-address 2>/dev/null || echo\
        \ \"\")\n                        if [ -z \"$ACTIVE_ADDRESS\" ] || [ \"$ACTIVE_ADDRESS\"\
        \ = \"None\" ]; then\n                            echo \"\u274C No active\
        \ address found.\"\n                            echo \"Available addresses:\"\
        \n                            sui client addresses || echo \"No addresses\
        \ available\"\n                            echo \"Please check your SUI_CONFIG\
        \ and SUI_KEYSTORE secrets.\"\n                            exit 1\n      \
        \                  else\n                            echo \"\u2705 Active\
        \ address: $ACTIVE_ADDRESS\"\n                        fi\n               \
        \         \n                        # Check if we have gas before attempting\
        \ deployment\n                        echo \"Checking gas balance...\"\n \
        \                       if ! sui client gas; then\n                      \
        \      echo \"\u274C Failed to check gas balance or no gas objects found.\"\
        \n                            echo \"Please fund your address with devnet\
        \ SUI tokens before deployment.\"\n                            echo \"You\
        \ can get devnet tokens from: https://discord.com/channels/916379725201563759/971488439931392130\"\
        \n                            exit 1\n                        fi\n       \
        \                 \n                        echo \"=== Publishing Package\
        \ ===\"\n                        if sui client publish --gas-budget 100000000;\
        \ then\n                            echo \"\u2705 Package published successfully\
        \ to devnet\"\n                        else\n                            echo\
        \ \"\u274C Deployment failed\"\n                            echo \"This might\
        \ be due to insufficient gas, network issues, or compilation errors\"\n  \
        \                          exit 1\n                        fi\n          \
        \          "
    - name: Request Test Tokens
      if: failure() && github.ref == 'refs/heads/main'
      run: "\n                        ACTIVE_ADDRESS=$(sui client active-address)\n\
        \                        echo \"Requesting test tokens for $ACTIVE_ADDRESS\"\
        \n                        curl -X POST https://faucet.devnet.sui.io/gas  \
        \                           -H 'Content-Type: application/json'          \
        \                   -d '{\"FixedAmountRequest\":{\"recipient\":\"$ACTIVE_ADDRESS\"\
        }}'\n                    "
    - name: Deploy to testnet
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        SUI_NETWORK: devnet
        SUI_CONFIG: ${{ secrets.SUI_CONFIG }}
        SUI_KEYSTORE: ${{ secrets.SUI_KEYSTORE }}
        SUI_ALIASES: ${{ secrets.SUI_ALIASES }}
      run: "\n                        # Verify sui command is available\n        \
        \                which sui || (echo \"Sui command not found in PATH\" && exit\
        \ 1)\n                        \n                        # Check if both SUI_CONFIG\
        \ and SUI_KEYSTORE are provided\n                        if [ -z \"$SUI_CONFIG\"\
        \ ] || [ -z \"$SUI_KEYSTORE\" ]; then\n                            echo \"\
        \u26A0\uFE0F  Deployment skipped: SUI_CONFIG or SUI_KEYSTORE secret is not\
        \ configured\"\n                            echo \"To enable deployment:\"\
        \n                            echo \"1. Add SUI_CONFIG secret with your wallet\
        \ configuration\"\n                            echo \"2. Add SUI_KEYSTORE\
        \ secret with your keystore file content\"\n                            echo\
        \ \"3. Fund the wallet with testnet SUI tokens\"\n                       \
        \     exit 0\n                        fi\n                        \n     \
        \                   echo \"Current active address:\"\n                   \
        \     sui client active-address || {\n                            echo \"\u274C\
        \ No active address found. Please check your SUI_CONFIG and SUI_KEYSTORE secrets.\"\
        \n                            exit 1\n                        }\n        \
        \                \n                        # Check if we have gas before attempting\
        \ deployment\n                        echo \"Checking gas balance...\"\n \
        \                       sui client gas || {\n                            echo\
        \ \"\u274C Failed to check gas balance. Address may not be funded.\"\n   \
        \                         echo \"Please fund your address with testnet SUI\
        \ tokens before deployment.\"\n                            exit 1\n      \
        \                  }\n                        \n                        echo\
        \ \"Publishing package...\"\n                        if sui client publish\
        \ --gas-budget 100000000; then\n                            echo \"\u2705\
        \ Package published successfully\"\n                        else\n       \
        \                     echo \"\u274C Deployment failed\"\n                \
        \            echo \"This might be due to insufficient gas or network issues\"\
        \n                            exit 1\n                        fi\n       \
        \             "
    - name: Verify deployment
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        SUI_CONFIG: ${{ secrets.SUI_CONFIG }}
      run: "\n                        # Verify sui command is available\n        \
        \                which sui || (echo \"Sui command not found in PATH\" && exit\
        \ 1)\n                        \n                        # Skip verification\
        \ if no SUI_CONFIG was provided\n                        if [ -z \"$SUI_CONFIG\"\
        \ ]; then\n                            echo \"\u26A0\uFE0F  Deployment verification\
        \ skipped: No SUI_CONFIG provided\"\n                            exit 0\n\
        \                        fi\n                        \n                  \
        \      # Get the latest transaction status\n                        echo \"\
        Checking recent transactions...\"\n                        sui client transactions\
        \ --limit 5 || true\n                        \n                        LATEST_TX=$(sui\
        \ client transactions --limit 1 | tail -n 1 | awk '{print $1}' 2>/dev/null\
        \ || echo \"\")\n                        if [ -n \"$LATEST_TX\" ] && [ \"\
        $LATEST_TX\" != \"digest\" ]; then\n                            echo \"Verifying\
        \ transaction: $LATEST_TX\"\n                            # Check transaction\
        \ status\n                            if sui client transaction \"$LATEST_TX\"\
        \ | grep -q \"Status.*Success\"; then\n                                echo\
        \ \"\u2705 Deployment verified successfully\"\n                          \
        \  else\n                                echo \"\u274C Deployment verification\
        \ failed\"\n                                sui client transaction \"$LATEST_TX\"\
        \ || true\n                                exit 1\n                      \
        \      fi\n                        else\n                            echo\
        \ \"\u26A0\uFE0F  No recent transaction found to verify, but deployment may\
        \ have succeeded\"\n                            echo \"Check the Sui explorer\
        \ for your package deployment\"\n                        fi\n            \
        \        "
