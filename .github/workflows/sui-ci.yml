name: Sui Smart Contract CI/CD
'on':
  push:
    branches:
    - main
    - develop
  pull_request:
    branches:
    - main
    - develop
env:
  RUST_BACKTRACE: '1'
  SUI_LOG_LEVEL: info
  SUI_BRANCH: devnet
jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
        - ubuntu-latest
        rust:
        - stable
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Install Homebrew and Sui
      run: "\n                        # Install Homebrew\n                       \
        \ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\
        \n                        \n                        # Add brew to PATH for\
        \ this step and future steps\n                        echo \"/home/linuxbrew/.linuxbrew/bin\"\
        \ >> $GITHUB_PATH\n                        echo \"/home/linuxbrew/.linuxbrew/sbin\"\
        \ >> $GITHUB_PATH\n                        \n                        # Set\
        \ environment variables for this workflow\n                        echo \"\
        HOMEBREW_PREFIX=/home/linuxbrew/.linuxbrew\" >> $GITHUB_ENV\n            \
        \            echo \"HOMEBREW_CELLAR=/home/linuxbrew/.linuxbrew/Cellar\" >>\
        \ $GITHUB_ENV\n                        echo \"HOMEBREW_REPOSITORY=/home/linuxbrew/.linuxbrew/Homebrew\"\
        \ >> $GITHUB_ENV\n                        \n                        # Source\
        \ brew environment for this step\n                        eval \"$(/home/linuxbrew/.linuxbrew/bin/brew\
        \ shellenv)\"\n                        \n                        # Install\
        \ dependencies\n                        sudo apt-get update\n            \
        \            sudo apt-get install -y build-essential\n                   \
        \     brew install gcc\n                        \n                       \
        \ # Install Sui\n                        brew install sui\n              \
        \          \n                        # Verify Sui installation\n         \
        \               sui --version\n                    "
    - name: Build Move modules
      run: "\n                        # Verify sui command is available\n        \
        \                which sui || (echo \"Sui command not found in PATH\" && exit\
        \ 1)\n                        sui --version\n                        \n  \
        \                      # Build the project\n                        sui move\
        \ build\n                    "
      working-directory: ${{ github.workspace }}
    - name: Run Move tests
      if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
      run: "\n                        # Verify sui command is available\n        \
        \                which sui || (echo \"Sui command not found in PATH\" && exit\
        \ 1)\n                        \n                        # Run tests\n    \
        \                    sui move test\n                    "
      working-directory: ${{ github.workspace }}
    - name: Setup Sui CLI with Mnemonic
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        SUI_MNEMONIC: ${{ secrets.SUI_MNEMONIC }}
      run: "\n                        # Verify sui command is available\n        \
        \                which sui || (echo \"Sui command not found in PATH\" && exit\
        \ 1)\n                        sui --version\n                        \n  \
        \                      if [ -z \"$SUI_MNEMONIC\" ]; then\n               \
        \             echo \"\u26A0\uFE0F  Deployment skipped: SUI_MNEMONIC secret\
        \ is not configured\"\n                            echo \"To enable deployment:\"\
        \n                            echo \"1. Get your wallet mnemonic phrase\"\n\
        \                            echo \"2. Add it as SUI_MNEMONIC secret in GitHub\
        \ repository settings\"\n                            echo \"3. Fund the wallet\
        \ with devnet SUI tokens\"\n                            exit 0\n         \
        \               fi\n                        \n                        echo\
        \ \"Setting up Sui wallet from mnemonic...\"\n                        \n \
        \                       # Create new address from mnemonic\n             \
        \           echo \"$SUI_MNEMONIC\" | sui client new-address ed25519 || {\n\
        \                            echo \"\u274C Failed to create address from mnemonic\"\
        \n                            exit 1\n                        }\n        \
        \                \n                        # Switch to devnet\n          \
        \              sui client switch --env https://fullnode.devnet.sui.io:443\
        \ || {\n                            echo \"\u274C Failed to switch to devnet\"\
        \n                            exit 1\n                        }\n        \
        \                \n                        echo \"\u2705 Wallet setup complete\"\
        \n                        \n                        # Display wallet info\n\
        \                        echo \"Active environment: $(sui client active-env)\"\
        \n                        echo \"Active address: $(sui client active-address)\"\
        \n                        echo \"Available addresses:\"\n                \
        \        sui client addresses\n                    "
    - name: Deploy to devnet
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        SUI_MNEMONIC: ${{ secrets.SUI_MNEMONIC }}
      run: "\n                        # Check if mnemonic is provided\n          \
        \              if [ -z \"$SUI_MNEMONIC\" ]; then\n                       \
        \     echo \"\u26A0\uFE0F  Deployment skipped: SUI_MNEMONIC secret is not\
        \ configured\"\n                            exit 0\n                     \
        \   fi\n                        \n                        echo \"=== Pre-deployment\
        \ Checks ===\"\n                        \n                        ACTIVE_ADDRESS=$(sui\
        \ client active-address 2>/dev/null || echo \"\")\n                      \
        \  if [ -z \"$ACTIVE_ADDRESS\" ] || [ \"$ACTIVE_ADDRESS\" = \"None\" ]; then\n\
        \                            echo \"\u274C No active address found\"\n   \
        \                         exit 1\n                        else\n         \
        \                   echo \"\u2705 Active address: $ACTIVE_ADDRESS\"\n    \
        \                    fi\n                        \n                      \
        \  # Check gas balance\n                        echo \"Checking gas balance...\"\
        \n                        if ! sui client gas; then\n                    \
        \        echo \"\u274C No gas objects found. Please fund your address with\
        \ devnet SUI tokens.\"\n                            echo \"Address to fund:\
        \ $ACTIVE_ADDRESS\"\n                            echo \"\"\n             \
        \               echo \"\U0001F4B0 Fund your address using one of these methods:\"\
        \n                            echo \"1. Discord faucet: https://discord.com/channels/916379725201563759/971488439931392130\"\
        \n                            echo \"2. Web faucet: https://faucet.devnet.sui.io/\"\
        \n                            echo \"3. API faucet:\"\n                  \
        \          echo \"   curl -X POST https://faucet.devnet.sui.io/gas \\\"\n\
        \                            echo \"        -H 'Content-Type: application/json'\
        \ \\\"\n                            echo \"        -d '{\"FixedAmountRequest\"\
        :{\"recipient\":\"$ACTIVE_ADDRESS\"}}'\"\n                            exit\
        \ 1\n                        fi\n                        \n              \
        \          echo \"=== Publishing Package ===\"\n                        if\
        \ sui client publish --gas-budget 100000000; then\n                      \
        \      echo \"\u2705 Package published successfully to devnet\"\n        \
        \                else\n                            echo \"\u274C Deployment\
        \ failed\"\n                            exit 1\n                        fi\n\
        \                    "
    - name: Request Test Tokens
      if: failure() && github.ref == 'refs/heads/main'
      run: "\n                        ACTIVE_ADDRESS=$(sui client active-address)\n\
        \                        echo \"Requesting test tokens for $ACTIVE_ADDRESS\"\
        \n                        curl -X POST https://faucet.devnet.sui.io/gas  \
        \                           -H 'Content-Type: application/json'          \
        \                   -d '{\"FixedAmountRequest\":{\"recipient\":\"$ACTIVE_ADDRESS\"\
        }}'\n                    "
    - name: Deploy to testnet
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        SUI_NETWORK: devnet
        SUI_CONFIG: ${{ secrets.SUI_CONFIG }}
        SUI_KEYSTORE: ${{ secrets.SUI_KEYSTORE }}
        SUI_ALIASES: ${{ secrets.SUI_ALIASES }}
      run: "\n                        # Verify sui command is available\n        \
        \                which sui || (echo \"Sui command not found in PATH\" && exit\
        \ 1)\n                        \n                        # Check if both SUI_CONFIG\
        \ and SUI_KEYSTORE are provided\n                        if [ -z \"$SUI_CONFIG\"\
        \ ] || [ -z \"$SUI_KEYSTORE\" ]; then\n                            echo \"\
        \u26A0\uFE0F  Deployment skipped: SUI_CONFIG or SUI_KEYSTORE secret is not\
        \ configured\"\n                            echo \"To enable deployment:\"\
        \n                            echo \"1. Add SUI_CONFIG secret with your wallet\
        \ configuration\"\n                            echo \"2. Add SUI_KEYSTORE\
        \ secret with your keystore file content\"\n                            echo\
        \ \"3. Fund the wallet with testnet SUI tokens\"\n                       \
        \     exit 0\n                        fi\n                        \n     \
        \                   echo \"Current active address:\"\n                   \
        \     sui client active-address || {\n                            echo \"\u274C\
        \ No active address found. Please check your SUI_CONFIG and SUI_KEYSTORE secrets.\"\
        \n                            exit 1\n                        }\n        \
        \                \n                        # Check if we have gas before attempting\
        \ deployment\n                        echo \"Checking gas balance...\"\n \
        \                       sui client gas || {\n                            echo\
        \ \"\u274C Failed to check gas balance. Address may not be funded.\"\n   \
        \                         echo \"Please fund your address with testnet SUI\
        \ tokens before deployment.\"\n                            exit 1\n      \
        \                  }\n                        \n                        echo\
        \ \"Publishing package...\"\n                        if sui client publish\
        \ --gas-budget 100000000; then\n                            echo \"\u2705\
        \ Package published successfully\"\n                        else\n       \
        \                     echo \"\u274C Deployment failed\"\n                \
        \            echo \"This might be due to insufficient gas or network issues\"\
        \n                            exit 1\n                        fi\n       \
        \             "
    - name: Verify deployment
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        SUI_CONFIG: ${{ secrets.SUI_CONFIG }}
      run: "\n                        # Verify sui command is available\n        \
        \                which sui || (echo \"Sui command not found in PATH\" && exit\
        \ 1)\n                        \n                        # Skip verification\
        \ if no SUI_CONFIG was provided\n                        if [ -z \"$SUI_CONFIG\"\
        \ ]; then\n                            echo \"\u26A0\uFE0F  Deployment verification\
        \ skipped: No SUI_CONFIG provided\"\n                            exit 0\n\
        \                        fi\n                        \n                  \
        \      # Get the latest transaction status\n                        echo \"\
        Checking recent transactions...\"\n                        sui client transactions\
        \ --limit 5 || true\n                        \n                        LATEST_TX=$(sui\
        \ client transactions --limit 1 | tail -n 1 | awk '{print $1}' 2>/dev/null\
        \ || echo \"\")\n                        if [ -n \"$LATEST_TX\" ] && [ \"\
        $LATEST_TX\" != \"digest\" ]; then\n                            echo \"Verifying\
        \ transaction: $LATEST_TX\"\n                            # Check transaction\
        \ status\n                            if sui client transaction \"$LATEST_TX\"\
        \ | grep -q \"Status.*Success\"; then\n                                echo\
        \ \"\u2705 Deployment verified successfully\"\n                          \
        \  else\n                                echo \"\u274C Deployment verification\
        \ failed\"\n                                sui client transaction \"$LATEST_TX\"\
        \ || true\n                                exit 1\n                      \
        \      fi\n                        else\n                            echo\
        \ \"\u26A0\uFE0F  No recent transaction found to verify, but deployment may\
        \ have succeeded\"\n                            echo \"Check the Sui explorer\
        \ for your package deployment\"\n                        fi\n            \
        \        "
