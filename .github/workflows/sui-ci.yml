name: Sui Smart Contract CI/CD
'on':
  push:
    branches:
    - main
    - develop
  pull_request:
    branches:
    - main
    - develop
env:
  RUST_BACKTRACE: '1'
  SUI_LOG_LEVEL: info
  SUI_BRANCH: devnet
jobs:
  build-and-test:
    name: Setup and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
        - ubuntu-latest
        rust:
        - stable
    steps:
    - name: Checkout code
      uses: actions/checkout@v3.5.3
    - name: Install Sui CLI
      run: "\n                        /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\
        \n                        echo 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew\
        \ shellenv)\"' >> /home/runner/.profile\n                        echo 'eval\
        \ \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"' >> /home/runner/.bashrc\n\
        \                        source /home/runner/.profile\n                  \
        \      eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"\n        \
        \                sudo apt-get update\n                        sudo apt-get\
        \ install -y build-essential\n                        brew install gcc\n \
        \                       eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"\
        \n                        brew install sui\n                    "
    - name: Build Move modules
      run: "\n                        eval \"$(/home/linuxbrew/.linuxbrew/bin/brew\
        \ shellenv)\"\n                        sui move build\n                  \
        \  "
      working-directory: ${{ github.workspace }}
    - name: Run Move tests
      if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
      run: "\n                        eval \"$(/home/linuxbrew/.linuxbrew/bin/brew\
        \ shellenv)\"\n                        sui move test\n                    "
      working-directory: ${{ github.workspace }}
  deploy:
    name: Deploy to Testnet
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Install Homebrew
      run: "\n                        /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\
        \n                        echo 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew\
        \ shellenv)\"' >> /home/runner/.profile\n                        echo 'eval\
        \ \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"' >> /home/runner/.bashrc\n\
        \                        source /home/runner/.profile\n                  \
        \  "
    - name: Install Build Dependencies
      run: "\n                        eval \"$(/home/linuxbrew/.linuxbrew/bin/brew\
        \ shellenv)\"\n                        sudo apt-get update\n             \
        \           sudo apt-get install -y build-essential\n                    \
        \    brew install gcc\n                    "
    - name: Install Sui CLI
      run: "\n                        eval \"$(/home/linuxbrew/.linuxbrew/bin/brew\
        \ shellenv)\"\n                        brew install sui\n                \
        \    "
    - name: Setup Sui CLI config
      run: "\n                        eval \"$(/home/linuxbrew/.linuxbrew/bin/brew\
        \ shellenv)\"\n                        if [ -n \"${{ secrets.SUI_CONFIG }}\"\
        \ ]; then\n                            mkdir -p ~/.sui/sui_config\n      \
        \                      echo \"${{ secrets.SUI_CONFIG }}\" > ~/.sui/sui_config/client.yaml\n\
        \                        else\n                            echo \"Warning:\
        \ SUI_CONFIG secret is not set. Creating default config...\"\n           \
        \                 mkdir -p ~/.sui/sui_config\n                           \
        \ cat > ~/.sui/sui_config/client.yaml << EOL\n                           \
        \ ---\n                            keystore:\n                           \
        \     File: ~/.sui/sui_config/sui.keystore\n                            envs:\n\
        \                                testnet:\n                              \
        \      url: \"https://fullnode.testnet.sui.io:443\"\n                    \
        \                ws-url: \"wss://fullnode.testnet.sui.io:443\"\n         \
        \                   active_env: testnet\n                            active_address:\
        \ null\n                            EOL\n                            \n  \
        \                          # Generate new keypair\n                      \
        \      sui keytool generate ed25519 > ~/.sui/sui_config/sui.keystore\n   \
        \                     fi\n                        \n                     \
        \   # Display config for debugging\n                        echo \"Current\
        \ Sui config:\"\n                        cat ~/.sui/sui_config/client.yaml\n\
        \                    "
    - name: Deploy to testnet
      env:
        SUI_NETWORK: testnet
        DEPLOYER_MNEMONIC: ${{ secrets.DEPLOYER_MNEMONIC }}
      run: "\n                        eval \"$(/home/linuxbrew/.linuxbrew/bin/brew\
        \ shellenv)\"\n                        # Set active environment\n        \
        \                sui client switch --env testnet\n                       \
        \ \n                        # Show current address for debugging\n       \
        \                 sui client active-address\n                        \n  \
        \                      # Publish package\n                        sui client\
        \ publish --gas-budget 100000000 || {\n                            echo \"\
        \u274C Deployment failed\"\n                            exit 1\n         \
        \               }\n                    "
    - name: Verify deployment
      run: "\n                        eval \"$(/home/linuxbrew/.linuxbrew/bin/brew\
        \ shellenv)\"\n                        # Get the latest transaction status\n\
        \                        LATEST_TX=$(sui client transactions | head -n 2 |\
        \ tail -n 1 | awk '{print $1}')\n                        if [ -n \"$LATEST_TX\"\
        \ ]; then\n                            # Check transaction status\n      \
        \                      sui client transaction $LATEST_TX | grep -q \"Status\
        \ : Success\"\n                            if [ $? -eq 0 ]; then\n       \
        \                         echo \"\u2705 Deployment verified successfully\"\
        \n                            else\n                                echo \"\
        \u274C Deployment verification failed\"\n                                exit\
        \ 1\n                            fi\n                        else\n      \
        \                      echo \"\u274C No transaction found to verify\"\n  \
        \                          exit 1\n                        fi\n          \
        \          "
