name: my-project - Sui Smart Contract CI/CD
'on':
  push:
    branches:
    - main
    - develop
  pull_request:
    branches:
    - main
    - develop
env:
  RUST_BACKTRACE: '1'
  SUI_LOG_LEVEL: info
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Install Homebrew and Sui
      run: |
        # Install Homebrew
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        
        # Add brew to PATH for this step and future steps
        echo "/home/linuxbrew/.linuxbrew/bin" >> $GITHUB_PATH
        echo "/home/linuxbrew/.linuxbrew/sbin" >> $GITHUB_PATH
        
        # Set environment variables for this workflow
        echo "HOMEBREW_PREFIX=/home/linuxbrew/.linuxbrew" >> $GITHUB_ENV
        echo "HOMEBREW_CELLAR=/home/linuxbrew/.linuxbrew/Cellar" >> $GITHUB_ENV
        echo "HOMEBREW_REPOSITORY=/home/linuxbrew/.linuxbrew/Homebrew" >> $GITHUB_ENV
        
        # Source brew environment for this step
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        
        # Install dependencies
        sudo apt-get update
        sudo apt-get install -y build-essential
        brew install gcc
        
        # Install Sui
        brew install sui
        
        # Verify Sui installation
        sui --version
    - name: Build Move modules
      run: |
        # Verify sui command is available
        which sui || (echo "Sui command not found in PATH" && exit 1)
        sui --version
        
        # Build the project
        sui move build
      working-directory: ${{ github.workspace }}
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Install Homebrew and Sui
      run: |
        # Install Homebrew
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        
        # Add brew to PATH for this step and future steps
        echo "/home/linuxbrew/.linuxbrew/bin" >> $GITHUB_PATH
        echo "/home/linuxbrew/.linuxbrew/sbin" >> $GITHUB_PATH
        
        # Set environment variables for this workflow
        echo "HOMEBREW_PREFIX=/home/linuxbrew/.linuxbrew" >> $GITHUB_ENV
        echo "HOMEBREW_CELLAR=/home/linuxbrew/.linuxbrew/Cellar" >> $GITHUB_ENV
        echo "HOMEBREW_REPOSITORY=/home/linuxbrew/.linuxbrew/Homebrew" >> $GITHUB_ENV
        
        # Source brew environment for this step
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        
        # Install dependencies
        sudo apt-get update
        sudo apt-get install -y build-essential
        brew install gcc
        
        # Install Sui
        brew install sui
        
        # Verify Sui installation
        sui --version
    - name: Run Move tests
      run: |
        # Verify sui command is available
        which sui || (echo "Sui command not found in PATH" && exit 1)
        
        # Run tests
        sui move test
      working-directory: ${{ github.workspace }}
  deploy-devnet:
    name: Deploy to devnet
    runs-on: ubuntu-latest
    needs:
    - test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    env:
      SUI_NETWORK: devnet
      SUI_CONFIG: ${{ secrets.SUI_CONFIG }}
      SUI_KEYSTORE: ${{ secrets.SUI_KEYSTORE }}
      SUI_ALIASES: ${{ secrets.SUI_ALIASES }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Install Homebrew and Sui
      run: |
        # Install Homebrew
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        
        # Add brew to PATH for this step and future steps
        echo "/home/linuxbrew/.linuxbrew/bin" >> $GITHUB_PATH
        echo "/home/linuxbrew/.linuxbrew/sbin" >> $GITHUB_PATH
        
        # Set environment variables for this workflow
        echo "HOMEBREW_PREFIX=/home/linuxbrew/.linuxbrew" >> $GITHUB_ENV
        echo "HOMEBREW_CELLAR=/home/linuxbrew/.linuxbrew/Cellar" >> $GITHUB_ENV
        echo "HOMEBREW_REPOSITORY=/home/linuxbrew/.linuxbrew/Homebrew" >> $GITHUB_ENV
        
        # Source brew environment for this step
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        
        # Install dependencies
        sudo apt-get update
        sudo apt-get install -y build-essential jq
        brew install gcc
        
        # Install Sui
        brew install sui
        
        # Verify Sui installation
        sui --version
    - name: Setup Sui CLI config and Deploy
      run: |
        # Verify sui command is available
        which sui || (echo "Sui command not found in PATH" && exit 1)
        
        # Check if all required secrets are provided
        if [ -z "$SUI_CONFIG" ] || [ -z "$SUI_KEYSTORE" ] || [ -z "$SUI_ALIASES" ]; then
            echo "⚠️  Deployment skipped: Required secrets are not configured"
            echo "To enable deployment:"
            echo "1. Add SUI_CONFIG secret with your wallet configuration"
            echo "2. Add SUI_KEYSTORE secret with your keystore file content"
            echo "3. Add SUI_ALIASES secret with your aliases file content"
            echo "4. Fund the wallet with devnet SUI tokens"
            exit 0
        fi
        
        # Create config directory
        mkdir -p ~/.sui/sui_config
        
        echo "Setting up Sui configuration..."
        echo "SUI_CONFIG secret present: $([ -n "$SUI_CONFIG" ] && echo "YES" || echo "NO")"
        echo "SUI_KEYSTORE secret present: $([ -n "$SUI_KEYSTORE" ] && echo "YES" || echo "NO")"
        echo "SUI_ALIASES secret present: $([ -n "$SUI_ALIASES" ] && echo "YES" || echo "NO")"
        
        # Write config file
        echo "Writing SUI_CONFIG to client.yaml..."
        echo "$SUI_CONFIG" > ~/.sui/sui_config/client.yaml
        echo "✅ Written SUI_CONFIG to client.yaml"
        
        # Write keystore file
        echo "Writing SUI_KEYSTORE to sui.keystore..."
        echo "$SUI_KEYSTORE" > ~/.sui/sui_config/sui.keystore
        echo "✅ Written SUI_KEYSTORE"
        
        # Write aliases file
        echo "Writing SUI_ALIASES to sui.aliases..."
        echo "$SUI_ALIASES" > ~/.sui/sui_config/sui.aliases
        echo "✅ Written SUI_ALIASES"
        
        # Set proper permissions
        chmod 600 ~/.sui/sui_config/*
        
        # Fix the keystore path in client.yaml
        echo "Fixing keystore path in client.yaml..."
        sed -i 's|/home/ngocanh/.sui/sui_config/sui.keystore|/home/runner/.sui/sui_config/sui.keystore|g' ~/.sui/sui_config/client.yaml
        echo "✅ Updated keystore path"
        
        # Try to check addresses from configuration
        echo "=== Checking Sui Configuration ==="
        sui client addresses || {
            echo "Failed to get addresses from keystore. Creating a new address for CI deployment..."
            
            # Create a new address for CI deployment
            echo "Creating new address..."
            NEW_ADDRESS=$(sui client new-address ed25519 --json | jq -r '.address' 2>/dev/null || {
                sui client new-address ed25519 | grep -oE '0x[a-fA-F0-9]+' | head -1
            })
            
            if [ -n "$NEW_ADDRESS" ]; then
                echo "✅ Created new address: $NEW_ADDRESS"
                
                # Try to get devnet tokens
                echo "Requesting devnet tokens..."
                curl -X POST https://faucet.devnet.sui.io/gas \
                    -H 'Content-Type: application/json' \
                    -d "{\"FixedAmountRequest\":{\"recipient\":\"$NEW_ADDRESS\"}}" \
                    --silent --show-error || echo "Warning: Failed to request tokens from faucet"
                
                # Wait for the faucet
                echo "Waiting for faucet transaction..."
                sleep 10
            else
                echo "❌ Failed to create new address"
            exit 1
            fi
        }
        
        # Final check - get active address
        ACTIVE_ADDRESS=$(sui client active-address 2>/dev/null || echo "")
        if [ -z "$ACTIVE_ADDRESS" ] || [ "$ACTIVE_ADDRESS" = "None" ]; then
            echo "❌ No active address found after configuration"
            exit 1
        else
            echo "✅ Active address: $ACTIVE_ADDRESS"
        fi
        
        # Check if we have gas before attempting deployment
        echo "Checking gas balance..."
        if ! sui client gas; then
            echo "❌ Failed to check gas balance or no gas objects found."
            echo "Please fund your address with devnet SUI tokens before deployment."
            echo "You can get devnet tokens from: https://discord.com/channels/916379725201563759/971488439931392130"
            exit 1
        fi
        
        echo "=== Publishing Package ==="
        if sui client publish --gas-budget 100000000; then
            echo "✅ Package published successfully to devnet"
        else
            echo "❌ Deployment failed"
            echo "This might be due to insufficient gas, network issues, or compilation errors"
            exit 1
        fi
